System.register(["jimu-core","jimu-ui/advanced/setting-components","jimu-ui"],(function(e,t){var s={},o={},a={};return{setters:[function(e){s.React=e.React,s.classNames=e.classNames,s.defaultMessages=e.defaultMessages,s.getAppStore=e.getAppStore},function(e){o.MapWidgetSelector=e.MapWidgetSelector,o.SettingRow=e.SettingRow,o.SettingSection=e.SettingSection},function(e){a.Switch=e.Switch,a.defaultMessages=e.defaultMessages}],execute:function(){e((()=>{var e={9964:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16"><path fill="#000" fill-rule="evenodd" d="M8 2.125 14.334 14H1.667L8 2.125Zm-.882-.47a1 1 0 0 1 1.765 0l6.333 11.874A1 1 0 0 1 14.334 15H1.667a1 1 0 0 1-.882-1.47L7.118 1.653ZM8 4.874a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0L8.9 5.87a.905.905 0 0 0-.9-.995Zm1 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z" clip-rule="evenodd"></path></svg>'},8891:e=>{"use strict";e.exports=s},726:e=>{"use strict";e.exports=a},7756:e=>{"use strict";e.exports=o}},t={};function n(s){var o=t[s];if(void 0!==o)return o.exports;var a=t[s]={exports:{}};return e[s](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.p="";var i={};return n.p=window.jimuConfig.baseUrl,(()=>{"use strict";n.r(i),n.d(i,{__set_webpack_public_path__:()=>d,default:()=>p});var e=n(8891);const t={selectMapWidget:"Select a map",sourceLabel:"Source",autoOpenClose:"Auto open and close widget parent if using an application template (like JewleryBox or Pocket) that has a Sidebar",advice:"Unless you want the map's pop-up to show the same data that this widget will show in its panel, you need to disable the map's pop-up by clicking on the map widget and in its settings dialog scroll down to the bottom in the Options section and turn on the \"Disable pop-up\" switch.",widgetUseAdvice:"Application Settings Advice"};var s=n(7756),o=n(726),a=n(9964),r=n.n(a);const c=t=>{const s=window.SVG,{className:o}=t,a=function(e,t){var s={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(s[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(o=Object.getOwnPropertySymbols(e);a<o.length;a++)t.indexOf(o[a])<0&&Object.prototype.propertyIsEnumerable.call(e,o[a])&&(s[o[a]]=e[o[a]])}return s}(t,["className"]),n=(0,e.classNames)("jimu-icon jimu-icon-component",o);return s?e.React.createElement(s,Object.assign({className:n,src:r()},a)):e.React.createElement("svg",Object.assign({className:n},a))};class l extends e.React.PureComponent{constructor(s){super(s),this.onPropertyChange=(e,t)=>{const{config:s}=this.props;if(t===s[e])return;const o=s.set(e,t),a={id:this.props.id,config:o};this.props.onSettingChange(a)},this.onAutoOpenCloseChange=e=>{const t=e.currentTarget;this.onPropertyChange("autoOpenClose",t.checked),this.setState({autoOpenCloseState:t.checked})},this.onMapWidgetSelected=e=>{this.props.onSettingChange({id:this.props.id,useMapWidgetIds:e})},this.formatMessage=(s,a)=>{const n=Object.assign({},t,o.defaultMessages,e.defaultMessages);return this.props.intl.formatMessage({id:s,defaultMessage:n[s]},a)},this.doesSidebarHaveFP=()=>{let t=!1;const s=(0,e.getAppStore)().getState().appConfig;let o,a;return this.sidebarWidgetsArray&&this.sidebarWidgetsArray.some((e=>{if(Object.keys(e.layouts.FIRST)[0]===this.props.browserSizeMode){o=e.layouts.FIRST[this.props.browserSizeMode],a=e.layouts.SECOND[this.props.browserSizeMode];let n=Object.keys(s.layouts[o].content),i=Object.keys(s.layouts[a].content);return n.some((e=>{if(s.layouts[o].content[e].widgetId===this.props.id)return t=!0,!0})),i.some((e=>{if(s.layouts[a].content[e].widgetId===this.props.id)return t=!0,!0})),!0}})),t},this.state={autoOpenCloseState:this.props.config.autoOpenClose}}render(){const{useMapWidgetIds:t,theme:a}=this.props,{autoOpenCloseState:n}=this.state;return e.React.createElement("div",null,e.React.createElement("div",{className:"widget-setting-feature"},e.React.createElement(s.SettingSection,{className:"map-selector-section"},e.React.createElement(s.SettingRow,{label:this.formatMessage("selectMapWidget")}),e.React.createElement(s.SettingRow,null,e.React.createElement(s.MapWidgetSelector,{onSelect:this.onMapWidgetSelected,useMapWidgetIds:t}))),e.React.createElement(s.SettingSection,null,e.React.createElement(s.SettingRow,{flow:"wrap",label:this.formatMessage("autoOpenClose")},e.React.createElement(o.Switch,{title:this.formatMessage("autoOpenClose"),onChange:this.onAutoOpenCloseChange,checked:n}))),e.React.createElement(s.SettingSection,{title:this.formatMessage("widgetUseAdvice")},e.React.createElement("div",{className:"d-flex w-100 justify-content-between",style:{marginTop:"5px"}},e.React.createElement(c,{color:a.colors.warning}),e.React.createElement("div",{style:{width:"calc(100% - 20px)",margin:"0 4px",overflow:"hidden",textOverflow:"ellipsis",color:a.colors.warning}},this.formatMessage("advice"))))))}}l.mapExtraStateProps=(e,t)=>(e&&e.appConfig,e&&e.browserSizeMode,{browserSizeMode:e&&e.browserSizeMode});const p=l;function d(e){n.p=e}})(),i})())}}}));